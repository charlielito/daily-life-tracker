// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subscription fields
  subscriptionStatus String   @default("free") // "free", "trial", "active", "cancelled", "unlimited"
  subscriptionId     String? // Stripe subscription ID
  customerId         String? // Stripe customer ID
  trialEndDate       DateTime?
  subscriptionEndDate DateTime?
  
  // Usage tracking (monthly limits)
  monthlyAiUsage      Int      @default(0)
  monthlyUploads      Int      @default(0)
  lastUsageReset      DateTime @default(now()) // Track when usage was last reset
  
  // Admin override for unlimited access
  isUnlimited        Boolean  @default(false) // Admin can set this to true for free unlimited access

  // Relations
  macroEntries      MacroEntry[]
  intestinalEntries IntestinalEntry[]
  weightEntries     WeightEntry[]

  @@map("users")
}

model MacroEntry {
  id               String   @id @default(cuid())
  userId           String
  description      String
  imageUrl         String?
  hour             DateTime
  date             DateTime
  calculatedMacros String? // JSON stored as string in SQLite
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("macro_entries")
}

model WeightEntry {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime // Date for the weight entry (one per day)
  weight    Float    // Weight in kg
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure one weight entry per user per day
  @@unique([userId, date])
  @@map("weight_entries")
}

model IntestinalEntry {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime
  hour        DateTime
  consistency String // Bristol Stool Scale (1-7)
  color       String
  painLevel   Int // 0-10 scale
  notes       String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("intestinal_entries")
} 